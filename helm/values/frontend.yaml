replicaCount: 2

image:
  repository: 443311183770.dkr.ecr.us-east-1.amazonaws.com/frontend
  pullPolicy: IfNotPresent
  tag: "latest"  # Override with specific tag during deployment

nameOverride: "frontend"
fullnameOverride: "frontend"

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80
  targetPort: 80

ingress:
  enabled: true
  className: "alb"
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "3"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    external-dns.alpha.kubernetes.io/hostname: liftnotebook.jcroyoaun.com
  hosts:
    - host: liftnotebook.jcroyoaun.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 50m
    memory: 64Mi

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}

config:
  nodeEnv: production
  port: 80
  appVersion: "1.0.0"
  logLevel: info
  apiPrefix: ""

probes:
  liveness:
    enabled: true
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readiness:
    enabled: true
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
